@page "/fetchdata"
@inject IWeatherForecastService WeatherService
@inject IJSRuntime JSRuntime
@inject IPrerenderingService Prerendering

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<div>
    <input disabled="@Prerendering.IsPrerendering" placeholder="Write somethng..." @bind="TextVar"/>
    <button disabled="@Prerendering.IsPrerendering" @onclick="ButtonClick">Click the button</button>
</div>

@if (string.IsNullOrEmpty(DynamicContent))
{
    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table" id="@(Prerendering.IsPrerendering ? DynamicContentId : String.Empty)">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <text>@((MarkupString)DynamicContent)</text>
}

@code {
    const string DynamicContentId = "DynamicContent";
    string DynamicContent = null;
    IEnumerable<WeatherForecast> forecasts;
    public string TextVar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Prerendering.IsPrerendering)
        {
            IJSInProcessRuntime JS = (IJSInProcessRuntime)JSRuntime;
            DynamicContent = JSLib.GetOuterHtmlById(JS, DynamicContentId);
        }
        forecasts = await WeatherService.GetForecastAsync(DateTime.Now);
        DynamicContent = null;
    }

    void ButtonClick()
    {
        TextVar = DateTime.UtcNow.ToString();
    }
}
